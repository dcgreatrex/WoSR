out
})
results.df <- do.call("rbind", ret)
results.df$abs_sae_compare_pod_min_rbu <- abs(results.df$model_sae) - abs(results.df$rbu1_sae)
for(i in 4:10){
results.df[,i] <- round(results.df[,i],5)
}
library('ggplot2')
ggplot(data = results.df, aes(x = model_rmse, y = budget_rmse )) +
geom_abline(intercept = 0, ltw = 2) +
geom_point() +
facet_wrap(~org, scales = "free") +
theme_bw()
View(results.df)
tmp.results <- results.df[,c(2,4:5)]
?? melt
library(data.table)
library(reshape)
View(tmp.results)
cast(tmp.results, org)
cast(tmp.results, id = "org")
melt(tmp.results, id = c("org"))
tmp.results <- melt(tmp.results, id = c("org"))
tmp.results$value <- log(tmp.results$value)
agg.prob <- aggregate(value ~ org + variable
,data = tmp.results, FUN = function(x){mean(x)})
View(dat.pods)
View(agg.prob)
tmp.results <- results.df[,c(2,4:5)]
library(reshape)
tmp.results <- melt(tmp.results, id = c("org"))
View(tmp.results)
which(tmp.results$value < 0)
which(tmp.results$value == 0)
tmp.results$value[tmp.results$value == 0]
tmp.results$value[tmp.results$value == 0] <- NULL
which(tmp.results$value == 0)
tmp.results[-which(tmp.results$value == 0),]
tmp.results <- tmp.results[-which(tmp.results$value == 0),]
tmp.results$value <- log(tmp.results$value)
agg.prob <- aggregate(value ~ org + variable
,data = tmp.results, FUN = function(x){mean(x)})
View(agg.prob)
agg.prob$Type <- as.factor(agg.prob$org)
tmp.results <- results.df[,c(2,4:5)]
library(reshape)
tmp.results <- melt(tmp.results, id = c("org"))
tmp.results <- tmp.results[-which(tmp.results$value == 0),]
tmp.results$value <- log(tmp.results$value)
agg.prob <- aggregate(value ~ org + variable
,data = tmp.results, FUN = function(x){mean(x)})
agg.prob$org <- as.factor(agg.prob$org)
agg.prob$variable <- as.factor(agg.prob$variable)
anova.prob <- cast(agg.prob, org ~ variable)
View(anova.prob)
idata <- data.frame(variable = c("model_rmse", "budget_rmse"))
idata$variable <- as.factor(idata$variable)
table = anova.prob
Bind <- cbind(table$model_rmse
,table$budget_rmse)
timingModel <- lm(Bind ~ 1)
analysis <- Anova(timingModel, idata = data.frame(idata), idesign = ~ variable)
?? Anova
library(car)
analysis <- Anova(timingModel, idata = data.frame(idata), idesign = ~ variable)
summary(analysis)
hist(anova.prob$model_rmse)
hist(anova.prob$model_rmse, breaks = 20)
hist(anova.prob$budget_rmse, breaks = 20)
hist(anova.prob$model_rmse, breaks = 20)
hist(anova.prob$budget_rmse, breaks = 20)
hist(anova.prob$model_rmse, breaks = 20)
hist(anova.prob$budget_rmse, breaks = 20)
hist(anova.prob$model_rmse, breaks = 20)
hist(anova.prob$model_rmse, breaks = 10)
hist(anova.prob$budget_rmse, breaks = 10)
h1 <- hist(anova.prob$model_rmse, plot = FALSE, breaks = 30)
h2 <- hist(anova.prob$budget_rmse, plot = FALSE, breaks = 30)
h2$counts = -h2$counts
hmax = max(h1$counts)
hmin = min(h2$counts)
X = c(h1$breaks, h2$breaks)
xmax = max(X)
xmin = min(X)
plot(h1, ylim = c(hmin, hmax), col = rgb(1,0,0,1/4), xlim = c(xmin, xmax)
,main = "Log transformed Revenue RMSE values: Model vs RBU3")
lines(h2, col = rgb(0,0,1,1/4))
c(1,2,3,4,5)
log(c(1,2,3,4,5))
View(results.df)
results.df$rmse_diff <- results.df$model_rmse - results.df$budget_rmse
?? MAPE
library('staTools')
# directories
data.dir <- "C:/Users/kwsp220/Box Sync/PODS/data/analysis/data/"
pods.dir <- "C:/Users/kwsp220/Box Sync/PODS/data/postprocessing/output/"
# load data
dat.pods <- read.csv(paste0(pods.dir, "PODS_fullrun_Nov17_Apr18_v1.csv"))
dat.r <- read.csv(paste0(data.dir, "PODS_v2_metrics_fullrun_Nov17_Apr18.csv"))
# replicate Dans table
dat.pods$Date <- as.yearmon(as.Date(paste("01-", dat.pods$Date, sep = ""), format = "%d-%b %Y"))
dat.pods <- subset(dat.pods, dat.pods$Date > "Dec 2017" & dat.pods$Date < "May 2018")
dat.pods <- subset(dat.pods, dat.pods$out.pred.type == "Predicted")
dat.pods <- dat.pods[!is.na(dat.pods$Value.compare),]
dat.pods <- dat.pods[,c(1:4,8,15,18,19,22)]
ret <- lapply(unique(dat.pods$id), FUN = function(i){
i = as.character(i)
tmp <- dat.pods[dat.pods$id == i,]
org <- unique(tmp$Org.Unit.Reporting.Name)
product <- unique(tmp$Product)
model_rmse <- MAPE(tmp$out.fit.adj, tmp$Value.compare)
budget_rmse <- MAPE(tmp$budget, tmp$Value.compare)
rbu1_rmse <- MAPE(tmp$RBU1, tmp$Value.compare)
model_sae <- sum(tmp$out.fit.adj - tmp$Value.compare)
budget_sae <- sum(tmp$budget - tmp$Value.compare)
rbu1_sae <- sum(tmp$RBU1 - tmp$Value.compare)
out <- data.frame(i
,org
,product
,model_rmse
,budget_rmse
,rbu1_rmse
,model_sae
,budget_sae
,rbu1_sae)
out
})
results.df <- do.call("rbind", ret)
backtest.id <- "PODS_fullrun_May17_Dec19_v3"
backtest.id <- "PODS_fullrun_May17_Dec19_v2"
library(zoo)
library(plyr)
# =========================================================================
#' load PODS output
# =========================================================================
f.data <- paste0(data_repo, "/modelling/output/", backtest.id, ".csv")
dat.out <- read.csv(f.data)
# =====
backtest.id <- "PODS_fullrun_May17_Dec19_v2"
library(zoo)
library(plyr)
# =========================================================================
#' load PODS output
# =========================================================================
f.data <- paste0(data_repo, "/modelling/output/", backtest.id, ".csv")
dat.out <- read.csv(f.data)
# =====
library(zoo)
library(plyr)
#============================================================================
code_repo <- "C:/Users/kwsp220/Box Sync/projects/PODS/PODS.git"
data_repo <- "C:/Users/kwsp220/Box Sync/PODS/data"
test.name <- "phase_2_Pete_Lower_060618"  #"phase_2_Pete_Lower_110518"
paste0(data_repo, "/modelling/output/", backtest.id, ".csv")
f.data <- paste0(data_repo, "/modelling/output/", backtest.id, ".csv")
dat.out <- read.csv(f.data)
p.data <- paste0(data_repo, "/preprocessing/output/", test.name)
dat.p <- read.csv(paste0(p.data,"/phase_2_cleansed_data_market_predictions.csv"))
dat.p$Org.Unit.Reporting.Name <- sub("/", "",dat.p$Org.Unit.Reporting.Name)
dat.p$id <- paste0(dat.p$Org.Unit.Reporting.Name,"_",dat.p$Product,"_",dat.p$Type)
keep <- as.character(unique(dat.out$id))
dat.p <- dat.p[dat.p$id %in% keep,]
# load market predictions
dat.budget <- dat.p[dat.p$Actual == "Budget",]
dat.RBU1 <- dat.p[dat.p$Actual == "RBU1",]
dat.RBU2 <- dat.p[dat.p$Actual == "RBU2",]
dat.LRP <- dat.p[dat.p$Actual == "LRP2017",]
# join budget to PODS out
dat.budget$Date <- as.yearmon(dat.budget$Date)
dat.budget <- dat.budget[,c(7,3,5)]
names(dat.budget)[3] <- "budget"
test <- join(dat.out, dat.budget, type = "full", match = "all")
# join RBU1 to PODS out
dat.RBU1$Date <- as.yearmon(dat.RBU1$Date)
dat.RBU1 <- dat.RBU1[,c(7,3,5)]
names(dat.RBU1)[3] <- "RBU1"
test <- join(test, dat.RBU1, type = "full", match = "all")
# join RBU2 to PODS out
dat.RBU2$Date <- as.yearmon(dat.RBU2$Date)
dat.RBU2 <- dat.RBU2[,c(7,3,5)]
names(dat.RBU2)[3] <- "RBU2"
test <- join(test, dat.RBU2, type = "full", match = "all")
# join LRP to PODS out
dat.LRP$Date <- as.yearmon(dat.LRP$Date)
dat.LRP <- dat.LRP[,c(7,3,5)]
names(dat.LRP)[3] <- "LRP"
test <- join(test, dat.LRP, type = "full", match = "all")
# =========================================================================
#' order finalised joined data table and test for errors
# =========================================================================
test$Date <- as.yearmon(test$Date)
dat.final <- test[order(test$id
,test$Date),]
# =========================================================================
#' add actuals for prediction period to output
# =========================================================================
dat.a <- read.csv(paste0(p.data,"/phase_2_cleansed_data_actuals.csv"))
dat.a$Org.Unit.Reporting.Name <- sub("/", "",dat.a$Org.Unit.Reporting.Name)
# subset actuals on min predicted interval month
dat.test <- dat.final
dat.test <- subset(dat.test, dat.test$out.pred.type == "Predicted")
p.start <- min(dat.test$Date)
# subset actuals on p.start
dat.a$Date <- as.yearmon(dat.a$Date)
dat.a.r <- subset(dat.a, dat.a$Date >= p.start)
dat.a.r$Value.compare <- ifelse(dat.a.r$Value == 0, NA, dat.a.r$Value)
dat.a.r <- na.omit(dat.a.r)
dat.a.r <- dat.a.r[,which(!names(dat.a.r) %in% "Value")]
# =========================================================================
#' adjust US Value.compare
# =========================================================================
# load adjustments
adj.data <- paste0(data_repo, "/modelling/input/", "US_adjustments.csv")
dat.adjust <- read.csv(adj.data)
dat.adjust$Date <- as.yearmon(as.Date(paste("01-", dat.adjust$Date, sep = ""), format = "%d-%b-%y"))
dat.adjust <- dat.adjust[dat.adjust$Date >= p.start,]
dat.adjust <- dat.adjust[,c(1:3,5)]
names(dat.adjust)[4] <- "adjust"
# join adjustments to actual data frame
a <- join(dat.a.r, dat.adjust, type = "left")
a$adjust <- ifelse(is.na(a$adjust), 0, a$adjust)
# add adjustments to actuals where exists
a$Value.compare <- a$Value.compare + a$adjust
a <- a[,1:5]
# join actuals to final
dat.final <- join(dat.final, a, type = "left")
as.Date(dat.final$Date)
dat.final$Date <- as.Date(dat.final$Date)
View(dat.final)
predict.start
which(dat.final$Date == as.Date(p.start, format="%b %Y"))
vline_idx = which(dat.final$Date == as.Date(p.start, format="%b %Y"))
ggplot(data = dat.final, aes(x = Date, y = dat.final$Value), lwd = 2) +
geom_line() +
geom_line(aes(x = Date, y = out.fit.adj), col = "red") +
geom_line(aes(x = Date, y = out.lwr), col = "blue", lty = 2) +
geom_line(aes(x = Date, y = out.upr), col = "blue", lty = 2) +
theme_bw()
library(ggplot2)
dat.final[dat.final$id == unique(dat.final$id)[100],]
tmp <- dat.final[dat.final$id == unique(dat.final$id)[100],]
ggplot(data = tmp, aes(x = Date, y = tmp$Value), lwd = 2) +
geom_line() +
geom_line(aes(x = Date, y = out.fit.adj), col = "red") +
geom_line(aes(x = Date, y = out.lwr), col = "blue", lty = 2) +
geom_line(aes(x = Date, y = out.upr), col = "blue", lty = 2) +
theme_bw()
ggplot(data = tmp, aes(x = Date, y = tmp$Value), lwd = 2) +
geom_line(aes(x = Date, y = adj.Value), col = "green2") +
geom_line() +
geom_line(aes(x = Date, y = out.fit.adj), col = "red") +
geom_line(aes(x = Date, y = out.lwr), col = "blue", lty = 2) +
geom_line(aes(x = Date, y = out.upr), col = "blue", lty = 2) +
theme_bw()
ggplot(data = tmp, aes(x = Date, y = tmp$Value), lwd = 2) +
geom_line(aes(x = Date, y = adj.Value), col = "green2") +
geom_line() +
geom_line(aes(x = Date, y = out.fit.adj), col = "red") +
geom_line(aes(x = Date, y = out.lwr), col = "blue", lty = 2) +
geom_line(aes(x = Date, y = out.upr), col = "blue", lty = 2) +
geom_vline(aes(xintercept=as.numeric(Date[vline_idx])), lty = 1)
theme_bw()
ggplot(data = tmp, aes(x = Date, y = tmp$Value), lwd = 2) +
geom_line(aes(x = Date, y = adj.Value), col = "green2") +
geom_line() +
geom_line(aes(x = Date, y = out.fit.adj), col = "red") +
geom_line(aes(x = Date, y = out.lwr), col = "blue", lty = 2) +
geom_line(aes(x = Date, y = out.upr), col = "blue", lty = 2) +
geom_vline(aes(xintercept=as.numeric(Date[vline_idx])), lty = 1) +
theme_bw()
which(dat.final$Date == p.start)
tmp$Date
p.start
which(as.yearmon(tmp$Date) == p.start)
vline_idx = which(as.yearmon(tmp$Date) == p.start)
ggplot(data = tmp, aes(x = Date, y = tmp$Value), lwd = 2) +
geom_line(aes(x = Date, y = adj.Value), col = "green2") +
geom_line() +
geom_line(aes(x = Date, y = out.fit.adj), col = "red") +
geom_line(aes(x = Date, y = out.lwr), col = "blue", lty = 2) +
geom_line(aes(x = Date, y = out.upr), col = "blue", lty = 2) +
geom_vline(aes(xintercept=as.numeric(Date[vline_idx])), lty = 1) +
theme_bw()
ggplot(data = tmp, aes(x = Date, y = tmp$Value), lwd = 2) +
geom_line(aes(x = Date, y = adj.Value), col = "green2") +
geom_line() +
geom_line(aes(x = Date, y = out.fit.adj), col = "red") +
geom_line(aes(x = Date, y = out.lwr), col = "blue", lty = 2) +
geom_line(aes(x = Date, y = out.upr), col = "blue", lty = 2) +
geom_vline(aes(xintercept=as.numeric(Date[vline_idx])), lty = 1) +
geom_line(aes(x = Date, y = RBU1), col = "orange") +
theme_bw()
vline_idx = which(as.yearmon(tmp$Date) == p.start)-1
ggplot(data = tmp, aes(x = Date, y = tmp$Value), lwd = 2) +
geom_line(aes(x = Date, y = adj.Value), col = "green2") +
geom_line() +
geom_line(aes(x = Date, y = out.fit.adj), col = "red") +
geom_line(aes(x = Date, y = out.lwr), col = "blue", lty = 2) +
geom_line(aes(x = Date, y = out.upr), col = "blue", lty = 2) +
geom_vline(aes(xintercept=as.numeric(Date[vline_idx])), lty = 1) +
geom_line(aes(x = Date, y = RBU1), col = "orange") +
theme_bw()
ggplot(data = tmp, aes(x = Date, y = tmp$Value), lwd = 2) +
geom_line(aes(x = Date, y = adj.Value), col = "green2") +
geom_line() +
geom_line(aes(x = Date, y = out.fit.adj), col = "blue3") +
geom_line(aes(x = Date, y = out.lwr), col = "blue", lty = 2) +
geom_line(aes(x = Date, y = out.upr), col = "blue", lty = 2) +
geom_vline(aes(xintercept=as.numeric(Date[vline_idx])), lty = 1) +
geom_line(aes(x = Date, y = RBU1), col = "red") +
theme_bw()
ggplot(data = tmp, aes(x = Date, y = tmp$Value), lwd = 2) +
geom_line(aes(x = Date, y = adj.Value), col = "green2") +
geom_line() +
geom_line(aes(x = Date, y = out.fit.adj), col = "blue3") +
geom_line(aes(x = Date, y = out.lwr), col = "blue", lty = 2) +
geom_line(aes(x = Date, y = out.upr), col = "blue", lty = 2) +
geom_vline(aes(xintercept=as.numeric(Date[vline_idx])), lty = 1) +
geom_line(aes(x = Date, y = RBU1), col = "red") +
theme_bw() +
ggtitle(paste0(id.key, " - ", out$model.descr)) +
ylab("Product.Sales - $MM")
ggplot(data = tmp, aes(x = Date, y = tmp$Value), lwd = 2) +
geom_line(aes(x = Date, y = adj.Value), col = "green2") +
geom_line() +
geom_line(aes(x = Date, y = out.fit.adj), col = "blue3") +
geom_line(aes(x = Date, y = out.lwr), col = "blue", lty = 2) +
geom_line(aes(x = Date, y = out.upr), col = "blue", lty = 2) +
geom_vline(aes(xintercept=as.numeric(Date[vline_idx])), lty = 1) +
geom_line(aes(x = Date, y = RBU1), col = "red") +
theme_bw() +
ggtitle(paste0(unique(tmp$id), " - ", unique(tmp$model.descr))) +
ylab("Product.Sales - $MM")
View(tmp)
unique(tmp$model.descr)
ggplot(data = tmp, aes(x = Date, y = tmp$Value), lwd = 2) +
geom_line(aes(x = Date, y = adj.Value), col = "green2") +
geom_line() +
geom_line(aes(x = Date, y = out.fit.adj), col = "blue3") +
geom_line(aes(x = Date, y = out.lwr), col = "blue", lty = 2) +
geom_line(aes(x = Date, y = out.upr), col = "blue", lty = 2) +
geom_vline(aes(xintercept=as.numeric(Date[vline_idx])), lty = 1) +
geom_line(aes(x = Date, y = RBU1), col = "red") +
theme_bw() +
ggtitle(paste0(unique(tmp$id), " - ", unique(tmp$out.model.descr))) +
ylab("Product.Sales - $MM")
ggplot(data = tmp, aes(x = Date, y = tmp$Value), lwd = 2) +
geom_line(aes(x = Date, y = adj.Value), col = "green2") +
geom_line() +
geom_line(aes(x = Date, y = out.fit.adj), col = "blue3") +
geom_line(aes(x = Date, y = out.lwr), col = "blue", lty = 2) +
geom_line(aes(x = Date, y = out.upr), col = "blue", lty = 2) +
geom_vline(aes(xintercept=as.numeric(Date[vline_idx])), lty = 1) +
geom_line(aes(x = Date, y = RBU1), col = "red") +
theme_bw() +
ggtitle(paste0(unique(tmp$id), " - ", unique(tmp$out.model.descr))) +
ylab("Product.Sales - $MM") +
scale_colour_manual(name = 'Model Type',
values =c('blue'='blue','red'='red'), labels = c('PODS','RBU1'))
q <- unique(dat.final$id)[100]
tmp <- dat.final[dat.final$id == q,]
p <- ggplot(data = tmp, aes(x = Date, y = tmp$Value), lwd = 2) +
geom_line(aes(x = Date, y = adj.Value), col = "green2") +
geom_line() +
geom_line(aes(x = Date, y = out.fit.adj), col = "blue3") +
geom_line(aes(x = Date, y = out.lwr), col = "blue", lty = 2) +
geom_line(aes(x = Date, y = out.upr), col = "blue", lty = 2) +
geom_vline(aes(xintercept=as.numeric(Date[vline_idx])), lty = 1) +
geom_line(aes(x = Date, y = RBU1), col = "red") +
theme_bw() +
ggtitle(paste0(unique(tmp$id), " - ", unique(tmp$out.model.descr))) +
ylab("Product.Sales - $MM")
print(p)
tryCatch({
# save plot
ggsave(filename = paste0(output.dir,q,'.png')
,width = 7.50, height = 5.25)
print("saved id_plot to file: successful")
}, error = function(e){
stop("error whilst saving id_plot to file. Aborting...")
})
paste0(output.dir,q,'.png')
out.dir <- "C:/Users/kwsp220/Box Sync/PODS/data/postprocessing/output/plots/PODS_fullrun_May18_Dec19_v2/"
paste0(out.dir,q,'.png')
q <- unique(dat.final$id)[100]
tmp <- dat.final[dat.final$id == q,]
p <- ggplot(data = tmp, aes(x = Date, y = tmp$Value), lwd = 2) +
geom_line(aes(x = Date, y = adj.Value), col = "green2") +
geom_line() +
geom_line(aes(x = Date, y = out.fit.adj), col = "blue3") +
geom_line(aes(x = Date, y = out.lwr), col = "blue", lty = 2) +
geom_line(aes(x = Date, y = out.upr), col = "blue", lty = 2) +
geom_vline(aes(xintercept=as.numeric(Date[vline_idx])), lty = 1) +
geom_line(aes(x = Date, y = RBU1), col = "red") +
theme_bw() +
ggtitle(paste0(unique(tmp$id), " - ", unique(tmp$out.model.descr))) +
ylab("Product.Sales - $MM")
print(p)
tryCatch({
# save plot
ggsave(filename = paste0(out.dir,q,'.png')
,width = 7.50, height = 5.25)
print("saved id_plot to file: successful")
}, error = function(e){
stop("error whilst saving id_plot to file. Aborting...")
})
library(plyr)
library(dplyr)
library(knitr)
library(caret)
install.packages("stringi")
library(caret)
library(rpart)
library(rpart.plot)
install.packages('rpart.plot')
library(rpart.plot)
library(rattle)
install.packages('rattle')
library(randomForest)
set.seed(35)
WoSR <- "C:/Users/kwsp220/Box Sync/projects/cambridge_team/conference/WoSR/WoSR"
setwd(WoSR)
list.files(data)
list.files("data/")
dat <- lapply(f, FUN = function(x){
tmp <- read.csv(f)
tmp
})
f <- list.files("data/")
dat <- lapply(f, FUN = function(x){
tmp <- read.csv(f)
tmp
})
list.files("data/")
dat <- lapply(f, FUN = function(x){
tmp <- read.csv(paste0("data/",f)
tmp
})
dat <- lapply(f, FUN = function(x){
tmp <- read.csv(paste0("data/",f))
tmp
})
f[1]
paste0("data/",f[1])
read.csv(paste0("data/",f[1]))
read.csv(paste0("data/",f[2]))
f <- list.files("data/")
dat <- lapply(f, FUN = function(x){
tmp <- read.csv(paste0("data/",f[x]))
tmp
})
f <- list.files("data/")
dat <- lapply(f, FUN = function(x){
tmp <- read.csv(paste0("data/",x))
tmp
})
names(dat) <- f
dat
endsWith(f, ".csv")
f[endsWith(f, ".csv")]
f <- list.files("data/")
f <- list.files("data/")
f <- list.files("data/")
dat <- lapply(f[endsWith(f, ".csv")], FUN = function(x){
tmp <- read.csv(paste0("data/",x))
})
f <- list.files("data/")
dat <- lapply(f[endsWith(f, ".csv")], FUN = function(x){
# load and process each csv file
tmp <- read.csv(paste0("data/",x))
})
names(dat) <- f
train <- dat$`pml-training.csv`
test <- dat$`pml-testing.csv`
dim(train)
names(train)
dim(train)
names(train)
View(train)
tmp <- read.csv(paste0("data/",f[1]))
tmp[,-c(1)]
? read.csv
f <- list.files("data/")
dat <- lapply(f[endsWith(f, ".csv")], FUN = function(x){
# load and process each csv file
tmp <- read.csv(paste0("data/", x), row.names = 1)
})
names(dat) <- f
train <- dat$`pml-training.csv`
test <- dat$`pml-testing.csv`
#============================================================================
# Set repository URL (ensure url points to local respository location)
#============================================================================
WoSR <- "C:/Users/kwsp220/Box Sync/projects/cambridge_team/conference/WoSR/WoSR"
setwd(WoSR)
#============================================================================
# Set repository URL (ensure url points to local respository location)
#============================================================================
WoSR <- "C:/Users/kwsp220/Box Sync/projects/cambridge_team/conference/WoSR/WoSR"
setwd(WoSR)
#============================================================================
# Set repository URL (ensure url points to local respository location)
#============================================================================
WoSR <- "C:/Users/kwsp220/Box Sync/projects/cambridge_team/conference/WoSR/WoSR"
setwd(WoSR)
library(plyr)
library(dplyr)
library(knitr)
library(caret)
library(rpart)
library(rpart.plot)
library(rattle)
